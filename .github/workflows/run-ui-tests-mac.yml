# GitHub Actions Workflow for launching UI tests on Linux, Windows, and Mac in the following steps:
# - prepare and launch IDE with your plugin and robot-server plugin, which is needed to interact with UI
# - wait for IDE to start
# - run UI tests with separate Gradle task
#
# Please check https://github.com/JetBrains/intellij-ui-test-robot for information about UI tests with IntelliJ Platform
#
# Workflow is triggered manually.

name: Run UI Tests Mac
on:
  push:
      branches:
        - 'feature/**'

jobs:
  run-ui-test:
    name: run tests for ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macOS-latest
            runIde: ./gradlew runIdeForUiTests &
            runTests: ./gradlew test
            url: http://127.0.0.1:8082
            reportName: ui-test-fails-report-mac

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3.3.0

      - name: Setup Java
        uses: actions/setup-java@v3.9.0
        with:
          distribution: zulu
          java-version: 11

      - name: Setup FFmpeg
        uses: FedericoCarboni/setup-ffmpeg@v2
        with:
          # Not strictly necessary, but it may prevent rate limit
          # errors especially on GitHub-hosted macos machines.
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Clean
        run: ./gradlew clean

      - name: Run Idea
        run: ${{ matrix.runIde }}

      - name: Wait for Idea started
        uses: jtalk/url-health-check-action@v3
        with:
          url: ${{ matrix.url }}
          max-attempts: 15
          retry-delay: 30s

      - name: Run tests
        run: ${{ matrix.runTests }}

      - name: Move video
        if: ${{ failure() }}
        run: mv video build/reports

      - name: Save fails report
        if: ${{ failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.reportName }}
          path: |
            build/reports